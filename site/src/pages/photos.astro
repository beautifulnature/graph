---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseHead from "../components/BaseHead.astro";
const photoCollections = await getCollection("photos");
import "photoswipe/dist/photoswipe.css";
import Header from "../components/Header.astro";
import FormattedDate from "../components/FormattedDate.astro";
import "leaflet/dist/leaflet.css";
interface GPS {
  lat: number;
  lng: number;
}
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title={"Photo Gallery"}
      description={"A photo gallery showcasing various collections."}
    />
  </head>
  <body>
    <Header />
    <main class="container mx-auto px-4 py-12">
      <h1 class="text-4xl font-bold mb-8 text-center">Photo Collections</h1>
      {
        photoCollections.map((collection) => (
          <div class="mb-12">
            <div class="flex mb-6">
              <div class="relative w-3/4">
                <Image
                  src={collection.data.cover}
                  alt="Cover Image"
                  width={900}
                  height={600}
                  format="webp"
                  class="w-full h-96 object-cover rounded-l-lg shadow-lg"
                />
                <div class="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black to-transparent">
                  <h2 class="text-3xl font-bold text-white">
                    {collection.data.name}
                  </h2>
                  <div class="mt-2 flex items-center space-x-4">
                    <div class="flex items-center space-x-1">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 text-white"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                      </svg>
                      <span class="text-sm text-white">
                        {collection.data.location}
                      </span>
                    </div>
                    <div class="flex items-center space-x-1">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 text-white"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                        />
                      </svg>
                      <FormattedDate
                        class="text-sm text-white"
                        date={collection.data.date}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                id={`map-${collection.data.name.toLowerCase().replace(/ /g, "-")}`}
                class="map-element w-1/4 h-96 bg-gray-200 rounded-r-lg shadow-lg"
                data-id={`map-${collection.data.name.toLowerCase().replace(/ /g, "-")}`}
                data-lat={collection.data.gps.lat}
                data-lng={collection.data.gps.lng}
              />
              </div>
            <p class="text-gray-700 mb-6">{collection.data.description}</p>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              {collection.data.photos.map((photo) => (
                <a
                  href={photo.filename.src}
                  data-pswp-width={photo.filename.width}
                  data-pswp-height={photo.filename.height}
                  target="_blank"
                  class={`relative block overflow-hidden ${photo.description || photo.title ? 'bg-gray-100' : ''}`}
                >
                  <Image
                    src={photo.filename}
                    alt={photo.title||''}
                    width={600}
                    height={400}
                    format="webp"
                    class="w-full h-64 object-cover transition duration-300 ease-in-out transform hover:scale-105"
                  />
                  <div class="p-2 flex flex-col">
  <p class="text-xs m-0 text-gray-600 font-semibold">
    {photo.title ? photo.title : photo.description}
  </p>
</div>
                </a>
              ))}
          </div>
        ))
      }
    </main>

    <footer class="text-center py-6">
      <p class="text-sm text-gray-500">
        Map data &copy; <a href="https://carto.com/" class="underline">Carto</a>
      </p>
    </footer>
  </body><script>
    import L from "leaflet";
    import PhotoSwipeLightbox from "photoswipe/lightbox";
    import PhotoSwipe from "photoswipe";
    const lightbox = new PhotoSwipeLightbox({
      gallery: ".grid",
      children: "a",
      showHideAnimationType: "zoom",
      pswpModule: PhotoSwipe,
    });
    lightbox.init();

    function initMap(id, lat, lng) {
      const map = L.map(id, {
        zoomControl: false,
        attributionControl: false,
      }).setView([lat, lng], 13);

      L.tileLayer(
        "https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",
        {
          subdomains: "abcd",
          maxZoom: 20,
        }
      ).addTo(map);

      L.marker([lat, lng]).addTo(map);
    }

    window.onload = function () {
      const mapElements = document.querySelectorAll(".map-element");
      mapElements.forEach((element) => {
        const { id, lat, lng } = element.dataset;
        initMap(id, parseFloat(lat), parseFloat(lng));
      });
    };
  </script>
</html>

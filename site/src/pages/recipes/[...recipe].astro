---
import { getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import { Schema } from "astro-seo-schema";
import type { CollectionEntry } from "astro:content";
import { Code } from "astro/components";
import type { LanguageRegistration } from "shiki";
import type { b } from "@shikijs/core/chunk-tokens.d.mts";
import CopyCodeButton from "../../components/CopyCodeButton.astro";
import cooklangLang from "../../lib/cooklangSyntax.json";

type IRawRepository = b["repository"];

const cooklangRegistration: LanguageRegistration = {
  name: "cook",
  scopeName: "source.cook",
  patterns: cooklangLang.patterns,
  repository: cooklangLang.repository as IRawRepository,
};

export async function getStaticPaths() {
  const blogEntries = await getCollection("recipes");

  return blogEntries.map((entry) => ({
    params: { recipe: entry.data.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { ingredients, cookwares, metadata, steps, shoppingList } = entry.data;

type Ingredient = CollectionEntry<"recipes">["data"]["ingredients"][0];

const combinedIngredients: Ingredient[] = ingredients.reduce<Ingredient[]>(
  (acc, curr) => {
    const existingIngredient = acc.find(ingredient => ingredient.name === curr.name);
    if (existingIngredient && existingIngredient.units === curr.units) {
      existingIngredient.quantity += curr.quantity;
    } else {
      acc.push({ ...curr });
    }
    return acc;
  },
  []
);

type Cookware = CollectionEntry<"recipes">["data"]["cookwares"][0];

const combinedCookwares: Cookware[] = cookwares.reduce<Cookware[]>(
  (acc, curr) => {
    const existingCookware = acc.find(cookware => cookware.name === curr.name);
    if (!existingCookware) {
      acc.push({ ...curr });
    }
    return acc;
  },
  []
);


---

<html lang="en">
  <head>
    <BaseHead
      title={metadata?.title || "Recipe"}
      description={metadata?.description || "Recipe"}
    />
    <Schema
      item={{
        "@context": "https://schema.org",
        "@type": "Recipe",
        name: metadata?.title,
        description: metadata?.description,
        image: ["https://briansunter.com/kitchen.jpg"],
        recipeIngredient: ingredients.map(
          ({ name, quantity, units }) =>
            `${quantity !== 1 && units ? `${Number.isInteger(quantity) ? quantity : quantity.toFixed(2)} ${units}` : units ? `1 ${units}` : ""} ${name}`
        ),
        recipeInstructions: steps.map((step, index) => ({
          "@type": "HowToStep",
          text: step
            .map((stepItem) => {
              if (stepItem.type === "text") {
                return stepItem.value;
              } else if (stepItem.type === "ingredient") {
                return `${stepItem.quantity !== 1 && stepItem.units ? `${Number.isInteger(stepItem.quantity) ? stepItem.quantity : stepItem.quantity.toFixed(2)} ${stepItem.units}` : stepItem.units ? `1 ${stepItem.units}` : ""} ${stepItem.name}`;
              } else if (stepItem.type === "timer") {
                return `${stepItem.quantity} ${stepItem.units}`;
              } else if (stepItem.type === "cookware") {
                return stepItem.name;
              }
            })
            .join(" "),
        })),
        recipeCuisine: [],
        author: metadata?.author
          ? {
              "@type": "Person",
              name: metadata.author,
            }
          : undefined,
        keywords: metadata?.tags?.map((tag) => tag.trim()),
        nutrition: {
          "@type": "NutritionInformation",
        },
        recipeYield: metadata?.servings,
        recipeCategory: metadata?.course,
        tool: cookwares.map(({ name }) => ({
          "@type": "HowToTool",
          name: name,
        })),
        totalTime: metadata?.prepTime
          ? `PT${metadata.prepTime}`
          : metadata?.cookTime
            ? `PT${metadata.cookTime}`
            : undefined,
      }}
    />
  </head>
  <body>
    <Header />
    <main class="container mx-auto p-4 max-w-3xl">
      <h1 class="text-4xl font-bold text-center my-8">{metadata?.title}</h1>
      {
        metadata?.description && (
          <p class="text-center text-lg text-gray-600 mb-8">
            {metadata.description}
          </p>
        )
      }
      {
        (metadata?.author || metadata?.servings || metadata?.tags) && (
          <div class="flex flex-wrap justify-center bg-gray-100 rounded-lg p-4 mb-8">
            <div class="flex flex-wrap justify-center items-center w-full mb-2">
              {metadata?.author && (
                <div class="flex items-center mr-4 mb-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 text-gray-500 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                    />
                  </svg>
                  <span class="text-gray-700">{metadata.author}</span>
                </div>
              )}

              {metadata?.servings && (
                <div class="flex items-center mr-4 mb-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 text-gray-500 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                    />
                  </svg>
                  <span class="text-gray-700">
                    {metadata.servings} servings
                  </span>
                </div>
              )}

              {metadata?.source && !metadata.source.startsWith("http") && (
                <div class="flex items-center mb-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 text-gray-500 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"
                    />
                  </svg>
                  <span class="text-gray-700">{metadata.source}</span>
                </div>
              )}
            </div>
            {metadata?.tags && (
              <div class="flex flex-wrap justify-center w-full">
                <span class="mr-2">Tags:</span>
                {metadata.tags.map((tag) => (
                  <span class="inline-block bg-blue-100 text-blue-800 rounded-full px-3 py-1 text-sm font-semibold mr-2 mb-2">
                    {tag.trim()}
                  </span>
                ))}
              </div>
            )}
          </div>
        )
      }

      <section class="mb-8">
        <h2 class="text-2xl font-semibold mb-4">Ingredients</h2>
        <ul class="list-disc pl-5">
          {
            combinedIngredients.map(({ name, quantity, units }) => (
              <li class="mb-2">
                {quantity !== 1 && units
                  ? `${Number.isInteger(quantity) ? quantity : quantity.toFixed(2)} ${units}`
                  : units
                    ? `1 ${units}`
                    : ""}{" "}
                {name}
              </li>
            ))
          }
        </ul>
      </section>

      {
        combinedCookwares.length > 0 && (
          <section class="mb-8">
            <h2 class="text-2xl font-semibold mb-4">Cookware</h2>
            <ul class="list-disc pl-5">
              {combinedCookwares.map(({ name }) => (
                <li class="mb-2">{name}</li>
              ))}
            </ul>
          </section>
        )
      }

      <section class="mb-8">
        <h2 class="text-2xl font-semibold mb-4">Steps</h2>
        {
          steps.map((step, index) => (
            <div class="mb-6">
              <h3 class="font-semibold mb-2">Step {index + 1}</h3>
              <p>
                {step.map((stepItem) => {
                  if (stepItem.type === "text") {
                    return <span>{stepItem.value}</span>;
                  } else if (stepItem.type === "ingredient") {
                    return (
                      <span class="inline-block bg-gray-100 text-gray-800 rounded px-1 py-1 mt-2">
                        {stepItem.quantity !== 1 && stepItem.units
                          ? `${Number.isInteger(stepItem.quantity) ? stepItem.quantity : stepItem.quantity.toFixed(2)} ${stepItem.units}`
                          : stepItem.units
                            ? `1 ${stepItem.units}`
                            : ""}{" "}
                        {stepItem.name}
                      </span>
                    );
                  } else if (stepItem.type === "timer") {
                    return (
                      <span class="inline-block bg-yellow-100 text-gray-800 rounded px-1 py-1 mt-2">
                        {stepItem.quantity} {stepItem.units}
                      </span>
                    );
                  } else if (stepItem.type === "cookware") {
                    return (
                      <span class="inline-block bg-red-100 text-gray-800 rounded px-1 py-1 mt-2">
                        {stepItem.name}
                      </span>
                    );
                  }
                })}
              </p>
            </div>
          ))
        }
      </section>
    </main>
    <section class="mb-8">
      <details class="relative">
        <summary
          class="mx-auto p-4 max-w-3xl text-2xl font-semibold mb-4 cursor-pointer"
          >Cooklang Recipe</summary
        >
        <div class="relative">
          <CopyCodeButton code={entry.data.cooklang}>Copy Recipe</CopyCodeButton
          >
          <Code code={entry.data.cooklang} lang={cooklangRegistration} />
        </div>
      </details>
    </section>
    <Footer />
  </body>
</html>

---
import { getCollection } from "astro:content";
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
export async function getStaticPaths() {
    const blogEntries = await getCollection("recipes");
  
    return blogEntries.map((entry) => ({
        params: { recipe: entry.data.slug },
        props: { entry },
    }));
}

const { entry } = Astro.props;
const { ingredients, metadata, steps } = entry.data;
---

<html lang="en">
    <head>
        <BaseHead title={metadata.title} description={"recipe"} />
    </head>
    <body>
        <Header />
<div class="container mx-auto p-4 max-w-3xl">
    <h1 class="text-3xl font-bold text-center my-6">{metadata.title}</h1>
  
    <section class="mb-8">
        <h2 class="text-2xl font-semibold mb-4">Ingredients</h2>
        <ul class="list-disc pl-5">
            {ingredients.map(({ name, quantity, units }) => (
                <li class="mb-2">
                    {quantity !== 1 && units ? `${quantity} ${units}` : units ? `1 ${units}` : ""} {name}
                </li>
            ))}
        </ul>
    </section>
    {entry.data.cookwares.length > 0 && (
        <section class="mb-8">
            <h2 class="text-2xl font-semibold mb-4">Cookware</h2>
            <ul class="list-disc pl-5">
                {entry.data.cookwares.map(({ name }) => (
                    <li class="mb-2">
                        {name}
                    </li>
                ))}
            </ul>
        </section>
    )}

    <section>
        <h2 class="text-2xl font-semibold mb-4">Steps</h2>
        {steps.map((step, index) => (
            <div class="mb-6">
                <h3 class="font-semibold mb-2">Step {index + 1}</h3>
                <p>
                    {step.map((stepItem, i) => {
                        if (stepItem.type === "text") {
                            return <span>{stepItem.value}</span>;
                        } else if (stepItem.type === "ingredient") {
                            return (
                                <span class="inline-block bg-gray-100 text-gray-800 rounded px-1 py-1 mt-2">{(stepItem.quantity !== 1 && stepItem.units ? `${stepItem.quantity} ${stepItem.units}` : stepItem.units ? `1 ${stepItem.units}` : "")} {stepItem.name}</span>
                                )
                        } else if (stepItem.type === "timer") {
                            return (
                                <span class="inline-block bg-yellow-100 text-gray-800 rounded px-1 py-1 mt-2">{stepItem.quantity} {stepItem.units}</span>
                            );
                        } else if (stepItem.type === "cookware") {
                            return (
                                <span class="inline-block bg-red-100 text-gray-800 rounded px-1 py-1 mt-2">{stepItem.name}</span>
                            );
                        }
                    })}
                </p>
            </div>
        ))}
    </section>
</div>
<Footer />
</body>
</html>